Handlers can be used to save configurations, restart services, send message to slack channel after something is completed, etc. 

Playbook used:

---
  - name: Install apache
    hosts: centos
	become: true
	
	tasks:
	  - name: ensure apache is installed.
	    yum:
		  name: httpd
		  state: present
		  
	  - name: ensure apache is running and starts at boot
	    service:
		  name: httpd
		  state: started
		  enabled: true


With handler added to restart apache after file is copied:. This will wait until the end of playbook to perform the handler

---
  - name: Install apache
    hosts: centos
	become: true
	
	handlers:
	  - name: restart apache
	    service:
		  name: httpd
		  state: restarted
	
	tasks:
	  - name: ensure apache is installed.
	    yum:
		  name: httpd
		  state: absent
		  
	  - name: copy test config file
	    copy:
		  src: files/test.config
		  dest: /etc/httpd/conf.d/test.conf
		notify: restart apache
		  
	  - name: ensure apache is running and starts at boot
	    service:
		  name: httpd
		  state: started
		  enabled: true

Next step is to immediately restart instead of waiting until the end

---
  - name: Install apache
    hosts: centos
	become: true
	
	handlers:
	  - name: restart apache
	    service:
		  name: httpd
		  state: restarted
	
	tasks:
	  - name: ensure apache is installed.
	    yum:
		  name: httpd
		  state: absent
		  
	  - name: copy test config file
	    copy:
		  src: files/test.config
		  dest: /etc/httpd/conf.d/test.conf
		notify: restart apache
		
	  - name: Make sure handlers are flushed immediately
	    meta: flush_handlers
		  
	  - name: ensure apache is running and starts at boot
	    service:
		  name: httpd
		  state: started
		  enabled: true

Ansible won't run handlers if there is a failure. To overcome this you can add the flag --force-handlers to the ansible-playbook command. 

If you want to add another step after restarting httpd in the example above, you can do the following to the handlers section:

		handlers:
		  - name: restart apache
		    service:
			  name: httpd
			  state: restarted
		
		 - name: restart memcached
		  service:
		    name: memcached
		    state: restarted
		
		!
		!
		  - name: copy test config file
		    copy:
			  src: files/test.config
			  dest: /etc/httpd/conf.d/test.conf
			notify: 
			  - restart apache
			  - restart memcached
		  
You can also nest the notifies:
handlers:
  - name: restart apache
    service:
	  name: httpd
	  state: restarted
    notify: restart memcached

 - name: restart memcached
  service:
    name: memcached
    state: restarted

!
!
  - name: copy test config file
    copy:
	  src: files/test.config
	  dest: /etc/httpd/conf.d/test.conf
	notify: 
	  - restart apache



